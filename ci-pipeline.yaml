name: CI-Pipeline

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'

steps:

# Include .NET 8 SDK...
- task: UseDotNet@2
  displayName: "--> Include .NET 8 SDK <--"
  inputs:
    packageType: sdk
    version: '8.0.x'

# Double check the above has been done...
- task: CmdLine@2
  displayName: "--> List .NET SDKs <--"
  inputs:
    script: 'dotnet --list-sdks'

# Show me the directory...
- task: CmdLine@2
  displayName: "--> Show directory contents <--"
  inputs:
    script: 'dir'

# Build the API project...
- task: DotNetCoreCLI@2
  displayName: "--> Build API <--"
  inputs:
    command: build
    projects: 'src/Morsley.UK.Test.API/Morsley.UK.Test.API.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: "--> Run API Unit Tests <--"
  inputs:
    command: test
    projects: 'tests/Morsley.UK.Tests.API.UnitTests/Morsley.UK.Tests.API.UnitTests.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code Coverage --settings:./cobertuna.settings.xml"'
    publishTestResults: true

# Show me the directory...
- task: CmdLine@2
  displayName: "--> Show directory contents <--"
  inputs:
    script: 'dir'

- task: PublishCodeCoverageResults@2
  displayName: "--> Publish Code Coverage Results <--"
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: "--> Publish .NET Project <--"
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: "--> Publish Artifacts <--"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
# Publish the API project...
- task: DotNetCoreCLI@2
  displayName: "--> Publish API <--"
  inputs:
    command: publish
    projects: 'src/Morsley.UK.Test.API/Morsley.UK.Test.API.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'
    publishWebProjects: false
    zipAfterPublish: false

# Publish artifacts for CD pipeline...
- task: PublishPipelineArtifact@1
  displayName: "--> Publish Pipeline Artifacts <--"
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'pipeline'
